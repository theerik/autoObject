#!/bin/sh
# -*- tcl -*-
# The next line is executed by /bin/sh, but not tcl \
exec tclsh "$0" ${1+"$@"}

#--------------------------------------------------------------------------
#
# FILENAME:    autoObjectWidgets.tcl
#
# AUTHOR:      theerik@github
#
# DESCRIPTION:  AutoObject is a base class used to create auto-assembling
#               objects using a descriptor array.  AutoObjectWidgets defines
#               a set of plugins that allow autoObjects to have an
#               autogenerated GUI representation, allowing examination and
#               manipulation of each field.  Widget classes are designed as
#               mixin classes, allowing them to be attached to many common
#               data types.
#
#               Common widgets provided include:
#               autoEntry
#               autoCombobox (for enums)
#
#--------------------------------------------------------------------------
#
# Copyright 2015-16, Erik N. Johnson
#
#--------------------------------------------------------------------------

#--------------------------------------------------------------------------
#  autoObject widget classes
#
# All widgets intended for use with AutoObject fields *must* support
# the following canonical methods:
#   * createWidget
#
# All classes should be declared in the ::AutoObject:: namespace, as below.
# N.B. that the widgets rely on the value of the object being in the canonical
# variable "MyValue".  If this does not hold for your class, you will need to
# recreate any widgets to work with the difference.
#
#
#--------------------------------------------------------------------------
#  autoEntry 
#
# Default widget for common use.  Simple entry field.
oo::class create ::AutoObject::autoEntry {
    
    method createWidget {wname args} {
        my variable MyValue
        my variable MyWidget
        set MyWidget [ttk::entry $wname -textvariable [self namespace]::MyValue \
                      -validate focusout -validatecommand [list [self] validate] {*}$args]
        oo::objdefine [self] forward widget $MyWidget
        if {[self next] ne {}} {next {*}$args}
        return $MyWidget
    }
    method validate {} {
        my variable MyWidget
        set curVal [$MyWidget get]
        my set $curVal
        return true
    }
}

#--------------------------------------------------------------------------
#  autoCombobox
#
# Most commonly used with data that's got an enum_mix mixed in.  Basic setup
# done here; note the call to "next", which calls the base class's method - 
# the enum_mix class populates the pick list and handles the housekeeping.
# Other classes may choose to use it differently.  
oo::class create ::AutoObject::autoCombobox {

    method createWidget {wname args} {
        my variable MyValue
        my variable MyWidget
        set ns [info object namespace [info object class [self object]]]
        upvar ${ns}::defArray defArray
        set MyWidget [ttk::combobox $wname -textvariable MyValue {*}$args]
        oo::objdefine [self] forward widget $MyWidget
        if {[self next] ne {}} {next {*}$args}
        return $MyWidget
    }
    method validate {} {
        my variable MyWidget
        set curVal [$MyWidget get]
        my set $curVal
        return true
    }
}

#--------------------------------------------------------------------------
#  autoLabel
#
# Unmodifiable label, for fixed fields
oo::class create ::AutoObject::autoLabel {

    method createWidget {wname args} {
        my variable MyValue
        my variable MyWidget
        set MyWidget [ttk::label $wname -text [set [self namespace]::MyValue] {*}$args]
        oo::objdefine [self] forward widget $MyWidget
        if {[self next] ne {}} {next {*}$args}
        return $MyWidget
    }
}

#--------------------------------------------------------------------------
#  autoNone
#
# non-widget for reserved fields
oo::class create ::AutoObject::autoNone {

    method createWidget {wname args} {
        my variable MyWidget
        set MyWidget ""
        return $MyWidget
    }
}


